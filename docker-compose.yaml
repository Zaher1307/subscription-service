version: "3.8"

services:
  subscription-service:
    build: .
    container_name: subscription-service
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=postgres-db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=subscription_service
      - REDIS_ADDR=redis-db:6379
      - REDIS_PASSWORD=
      - REDIS_DB=1
      - REDIS_POOL_SIZE=10
      - REDIS_CONN_TIMEOUT=5s
      - REDIS_MAX_RETRIES=3
      - PORT=8080
      - GIN_MODE=release
    depends_on:
      postgres-db:
        condition: service_healthy
      redis-db:
        condition: service_healthy
    restart: unless-stopped

  postgres-db:
    image: postgres:14-alpine
    container_name: postgres-db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=subscription_service
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/db_init.sql:/docker-entrypoint-initdb.d/01_init.sql
      - ./scripts/test_data.sql:/docker-entrypoint-initdb.d/02_test_data.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d subscription_service"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  redis-db:
    image: redis:7-alpine
    container_name: redis-db
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: unless-stopped

volumes:
  postgres-data:
  redis-data:
